#!/bin/bash

# InkyRemote Network Setup Script
# This script configures the Pi Zero W2 for WiFi/AP mode switching

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

success() {
    echo -e "${GREEN}[SUCCESS] $1${NC}"
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root (use sudo)"
    fi
}

# Update system packages
update_system() {
    log "Updating system packages..."
    apt-get update -y
    apt-get upgrade -y
    success "System packages updated"
}

# Install required packages
install_packages() {
    log "Installing required packages..."
    
    # Network management packages
    apt-get install -y hostapd dnsmasq iptables-persistent
    
    # Python packages for GPIO and network management
    apt-get install -y python3-pip python3-dev python3-venv
    
    # System utilities
    apt-get install -y iw wireless-tools wpasupplicant
    
    success "Required packages installed"
}

# Configure hostapd
configure_hostapd() {
    log "Configuring hostapd..."
    
    # Create hostapd configuration
    cat > /etc/hostapd/hostapd.conf << 'EOF'
# Interface to use
interface=wlan0

# Driver to use
driver=nl80211

# Network name
ssid=InkyRemote

# Country code (required for regulatory compliance)
country_code=US

# Network mode (g = IEEE 802.11g, n = 802.11n)
hw_mode=g
ieee80211n=1

# Channel to use (1-11 for 2.4GHz in US)
channel=6

# Enable WMM (required for modern devices)
wmm_enabled=1

# MAC address access control
macaddr_acl=0

# Authentication algorithms
auth_algs=1

# Broadcast SSID (0 = broadcast, 1 = hidden)
ignore_broadcast_ssid=0

# Use WPA2
wpa=2
wpa_passphrase=inkyremote123
wpa_key_mgmt=WPA-PSK
wpa_pairwise=TKIP
rsn_pairwise=CCMP
EOF

    # Set hostapd config path
    echo 'DAEMON_CONF="/etc/hostapd/hostapd.conf"' > /etc/default/hostapd
    
    # Initially disable hostapd (will be managed by our script)
    systemctl disable hostapd
    
    success "hostapd configured"
}

# Configure dnsmasq
configure_dnsmasq() {
    log "Configuring dnsmasq..."
    
    # Backup original config
    if [ -f /etc/dnsmasq.conf ]; then
        cp /etc/dnsmasq.conf /etc/dnsmasq.conf.backup
    fi
    
    # Create dnsmasq configuration for AP mode
    cat > /etc/dnsmasq.conf << 'EOF'
# Only listen on wlan0 interface
interface=wlan0

# Never forward plain names (without a dot or domain part)
domain-needed

# Never forward addresses in the non-routed address spaces
bogus-priv

# DHCP range for clients
dhcp-range=192.168.4.2,192.168.4.20,255.255.255.0,24h

# Set the gateway
dhcp-option=3,192.168.4.1

# Set DNS servers  
dhcp-option=6,192.168.4.1,8.8.8.8

# Log DHCP requests
log-dhcp
EOF
    
    # Initially disable dnsmasq (will be managed by our script)
    systemctl disable dnsmasq
    
    success "dnsmasq configured"
}

# Configure networking (dhclient system)
configure_networking() {
    log "Configuring networking for dhclient system..."
    
    # Check if we have interfaces file
    if [ -f /etc/network/interfaces ]; then
        # Backup original config
        cp /etc/network/interfaces /etc/network/interfaces.backup
        log "Backed up /etc/network/interfaces"
    fi
    
    # For dhclient systems, most configuration is done dynamically
    # by the network_manager.py script
    
    success "Networking configured for dhclient system"
}

# Configure iptables for NAT (optional internet sharing)
configure_iptables() {
    log "Configuring iptables for NAT..."
    
    # Enable IP forwarding
    echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf
    
    # Create iptables rules for NAT
    cat > /etc/iptables/rules.v4 << 'EOF'
# Generated by InkyRemote setup
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]

# Allow loopback
-A INPUT -i lo -j ACCEPT

# Allow established connections
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT

# Allow SSH (be careful!)
-A INPUT -p tcp --dport 22 -j ACCEPT

# Allow HTTP for web interface
-A INPUT -p tcp --dport 5000 -j ACCEPT

# Allow DHCP
-A INPUT -p udp --dport 67 -j ACCEPT
-A INPUT -p udp --dport 68 -j ACCEPT

# Allow DNS
-A INPUT -p tcp --dport 53 -j ACCEPT
-A INPUT -p udp --dport 53 -j ACCEPT

# Allow forwarding from wlan0 to eth0 (if available)
-A FORWARD -i wlan0 -o eth0 -j ACCEPT
-A FORWARD -i eth0 -o wlan0 -m state --state RELATED,ESTABLISHED -j ACCEPT

COMMIT

*nat
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]

# NAT rule for internet sharing (if eth0 available)
-A POSTROUTING -o eth0 -j MASQUERADE

COMMIT
EOF

    # Load iptables rules
    iptables-restore < /etc/iptables/rules.v4
    
    success "iptables configured"
}

# Install Python dependencies
install_python_deps() {
    log "Installing Python dependencies..."
    
    # Create virtual environment if it doesn't exist
    VENV_PATH="/home/jweinhart/.virtualenvs/pimoroni"
    if [ ! -d "$VENV_PATH" ]; then
        log "Creating Python virtual environment..."
        sudo -u jweinhart python3 -m venv "$VENV_PATH"
    fi
    
    # Install required Python packages
    sudo -u jweinhart "$VENV_PATH/bin/pip" install --upgrade pip
    sudo -u jweinhart "$VENV_PATH/bin/pip" install gpiod gpiodevice
    
    success "Python dependencies installed"
}

# Set up sudoers permissions for network management
configure_sudo_permissions() {
    log "Configuring sudo permissions for network management..."
    
    # Allow the service user to run network commands without password
    cat > /etc/sudoers.d/inkyremote-network << 'EOF'
# Allow inkyremote user to manage network services without password
jweinhart ALL=(root) NOPASSWD: /bin/systemctl start hostapd
jweinhart ALL=(root) NOPASSWD: /bin/systemctl stop hostapd
jweinhart ALL=(root) NOPASSWD: /bin/systemctl restart hostapd
jweinhart ALL=(root) NOPASSWD: /bin/systemctl start dnsmasq
jweinhart ALL=(root) NOPASSWD: /bin/systemctl stop dnsmasq
jweinhart ALL=(root) NOPASSWD: /bin/systemctl restart dnsmasq
jweinhart ALL=(root) NOPASSWD: /bin/systemctl start wpa_supplicant
jweinhart ALL=(root) NOPASSWD: /bin/systemctl stop wpa_supplicant
jweinhart ALL=(root) NOPASSWD: /bin/systemctl restart wpa_supplicant
jweinhart ALL=(root) NOPASSWD: /bin/systemctl start networking
jweinhart ALL=(root) NOPASSWD: /bin/systemctl stop networking
jweinhart ALL=(root) NOPASSWD: /bin/systemctl restart networking
jweinhart ALL=(root) NOPASSWD: /sbin/dhclient *
jweinhart ALL=(root) NOPASSWD: /sbin/ip *
jweinhart ALL=(root) NOPASSWD: /usr/sbin/wpa_cli *
jweinhart ALL=(root) NOPASSWD: /sbin/sysctl net.ipv4.ip_forward=1
EOF
    
    success "Sudo permissions configured"
}

# Create systemd service for network management
create_systemd_service() {
    log "Creating systemd service for network management..."
    
    # The service file should already exist, but let's verify network management is enabled
    if [ -f /etc/systemd/system/inkyremote.service ]; then
        success "InkyRemote service already exists"
    else
        warning "InkyRemote service not found - please ensure inkyremote.service is properly installed"
    fi
    
    # Reload systemd
    systemctl daemon-reload
}

# Verify installation
verify_installation() {
    log "Verifying installation..."
    
    # Check if packages are installed
    packages=("hostapd" "dnsmasq" "iw" "wpasupplicant")
    for pkg in "${packages[@]}"; do
        if dpkg -l | grep -q "^ii.*$pkg"; then
            success "$pkg is installed"
        else
            error "$pkg is not installed"
        fi
    done
    
    # Check if configuration files exist
    configs=("/etc/hostapd/hostapd.conf" "/etc/dnsmasq.conf" "/etc/sudoers.d/inkyremote-network")
    for config in "${configs[@]}"; do
        if [ -f "$config" ]; then
            success "Configuration file $config exists"
        else
            error "Configuration file $config is missing"
        fi
    done
    
    success "Installation verification completed"
}

# Main setup function
main() {
    log "Starting InkyRemote network setup..."
    
    check_root
    update_system
    install_packages
    configure_hostapd
    configure_dnsmasq
    configure_networking
    configure_iptables
    install_python_deps
    configure_sudo_permissions
    create_systemd_service
    verify_installation
    
    success "InkyRemote network setup completed!"
    echo ""
    log "Next steps:"
    echo "1. Reboot your Pi: sudo reboot"
    echo "2. The InkyRemote service should start automatically"
    echo "3. Use the web interface or physical buttons to switch network modes"
    echo ""
    log "Network modes:"
    echo "- WiFi mode: Connects to your existing WiFi network"
    echo "- AP mode: Creates 'InkyRemote' access point (password: inkyremote123)"
    echo ""
    log "Button controls:"
    echo "- Button A: Toggle WiFi/AP mode"
    echo "- Button B: Show network status on display"
    echo "- Hold Button C (1s): Force WiFi mode"
    echo "- Hold Button D (1s): Force AP mode"
}

# Run main function
main "$@" 